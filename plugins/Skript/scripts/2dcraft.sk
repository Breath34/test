command /shonenadmin:
    trigger:
        # Admin commands will go here
        send "Shonen Smash Admin Panel" to player

on load:
    send "[Shonen Smash] Script loaded!" to console

# Basic character and ability structure (to be expanded)
# Example:
# define character "Naruto":
#     ability 1: "Rasengan"
#     ability 2: "Shadow Clone Jutsu"

# Game states
# - Lobby
# - Character Selection
# - In-Game
# - Post-Game

# Player data (will likely use Skript variables or SkBee NBT)
# - Chosen character
# - Stocks/Lives
# - Damage percentage

# Arena management

options:
    default_stocks: 3
    max_damage_for_knockback_scaling: 200 # Percentage at which knockback scaling maxes out
    base_knockback_strength: 0.5
    knockback_scaling_factor: 0.015

# Core gameplay loops
# - Attack handling
# - Ability activation
# - Damage calculation
# - Knockback
# - Stock deduction
# - Win/Loss conditions

# SkBee and Skript-Reflect will be used for more advanced features like:
# - Custom particle effects (SkBee)
# - Complex inventory GUIs (SkBee)
# - Accessing Bukkit/Spigot API for fine-grained control (Skript-Reflect)
# - Custom sound effects (SkBee)

# Let's start with a simple join message
on join:
    send title "&6Welcome to &cShonen Smash!" to player for 3 seconds
    send subtitle "&ePrepare for battle!" to player for 3 seconds
    set {shonen.player.%player%.stocks} to {@default_stocks}
    set {shonen.player.%player%.damage} to 0

# Combat System
on damage:
    attacker is a player
    victim is a player
    # Prevent default damage, we'll handle it manually
    cancel event

    # Add damage percentage
    # For now, every hit adds 10%
    add 10 to {shonen.player.%victim%.damage}
    send action bar "&c&l%{shonen.player.%victim%.damage}%%%&r" to victim

    # Knockback
    # Calculate knockback strength based on damage percentage
    set {_victim_damage} to {shonen.player.%victim%.damage}
    if {_victim_damage} > {@max_damage_for_knockback_scaling}:
        set {_victim_damage} to {@max_damage_for_knockback_scaling}

    set {_knockback_strength} to {@base_knockback_strength} + ({_victim_damage} * {@knockback_scaling_factor})

    # Apply knockback
    # Simple knockback away from attacker, with some upward force
    set {_direction} to vector from attacker to victim
    # Normalize and apply strength (Skript might not have vector normalization directly, so this is a simplified approach)
    # We are pushing the victim away from the attacker
    # Skript's default push direction is often sufficient if we just set speed
    # For more precise vector math, Skript-Reflect would be needed.
    # push victim direction {_direction} speed {_knockback_strength}
    # A simpler way for now:
    push victim upwards with speed {_knockback_strength} / 2
    push victim in direction {_direction} at speed {_knockback_strength}

    # Broadcast damage for debugging
    broadcast "&e%attacker% &7hit &c%victim%&7! Victim's damage: &c%{shonen.player.%victim%.damage}%%%&r"

# TODO:
# - Stock deduction when falling out of bounds / Y-level check
# - Respawn mechanic
# - Arena definition and boundary checks
# - Different attacks/abilities with varying damage/knockback

# TODO:
# - Stock deduction when falling out of bounds / Y-level check
# - Respawn mechanic
# - Arena definition and boundary checks
# - Different attacks/abilities with varying damage/knockback 